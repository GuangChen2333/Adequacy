buildscript {
    repositories {
        maven {
            name = 'Aliyun'
            url = 'https://maven.aliyun.com/repository/public'
        }
        maven {
            name = 'Lss233'
            url = 'https://lss233.littleservice.cn/repositories/minecraft'
        }
        maven {
            name = 'Minecraft Forge'
            url = 'https://files.minecraftforge.net/maven'
        }
        maven {
            name = 'Sponge Powered'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.spongepowered:mixingradle:0.7.+'
    }
}


apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'maven-publish'
apply plugin: 'idea'

version = project.modVersion
group = 'cn.guangchen233.adequacy'
archivesBaseName = 'Adequacy'

String javaVersion = '1.8'
sourceCompatibility = targetCompatibility = javaVersion

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    // Minecraft
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'
    annotationProcessor 'org.spongepowered:mixin:0.8.2:processor'
    include('org.spongepowered:mixin:0.7.11-SNAPSHOT') {
        exclude module: 'commons-io'
        exclude module: 'gson'
        exclude module: 'guava'
        exclude module: 'launchwrapper'
        exclude module: 'log4j-core'
    }

    // Others
    implementation 'org.jetbrains:annotations:24.0.0'
}

repositories {
    maven {
        name = 'Aliyun'
        url = 'https://maven.aliyun.com/repository/public'
    }
    maven {
        name = 'AliyunPlugin'
        url = 'https://maven.aliyun.com/repository/gradle-plugin'
    }
    maven {
        name = 'Lss233'
        url = 'https://lss233.littleservice.cn/repositories/minecraft'
    }
    maven {
        name = 'Minecraft Forge'
        url = 'https://files.minecraftforge.net/maven'
    }
    maven {
        name = 'Sponge Powered'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
    }
    mavenLocal()
}

compileJava {
    options.encoding = 'UTF-8'
    sourceCompatibility = targetCompatibility = javaVersion
}

minecraft {
    mappings channel: 'stable', version: '39-1.12'

    accessTransformer = file('src/main/resources/adequacy_at.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            property 'fml.coreMods.load', 'cn.guangchen233.adequacy.injection.MixinLoader'
            property 'mixin.env.disableRefMap', 'true'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }
}

mixin {
    add sourceSets.main, "mixins.adequacy.refmap.json"
    config "mixins.adequacy.json"
}

jar {
    manifest {
        attributes(
                [
                        "FMLCorePluginContainsFMLMod": true,
                        "FMLCorePlugin"              : "cn.guangchen233.adequacy.injection.MixinLoader",
                        'MixinConfigs'               : 'mixins.adequacy.json',
                        "ModSide"                    : "CLIENT",
                        'tweakClass'                 : 'org.spongepowered.asm.launch.MixinTweaker',
                        'TweakOrder'                 : 0,
                        'ForceLoadAsMod'             : 'true',
                        'FMLAT'                      : 'adequacy_at.cfg'
                ]
        )
    }
    from { configurations.include.collect { it.isDirectory() ? it : zipTree(it) } }
}

processResources {
    filteringCharset 'UTF-8'

    inputs.property "version", project.version

    filesMatching("mcmod.info") {
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
        expand "version": project.version
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}

tasks.register('prepareAssets', Copy) {
    group = 'build'
    from project.file('src/main/resources')
    into project.file('build/classes/java/main')
}

classes.dependsOn(prepareAssets)
